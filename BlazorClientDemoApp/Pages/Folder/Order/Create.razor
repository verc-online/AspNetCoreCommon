@page "/Order/Create"

@using BlazorClientDemoApp.Models
@using DataLibrary.Models
@inject HttpClient Http
@inject NavigationManager navigationManager

<h3>Create</h3>
@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <h4>System Error</h4>
    <p>@errorString</p>
}
else if (foodItems.Count == 0)
{
    <h4>Loading...</h4>
}
else
{
    
    <EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary Model="@order"></ValidationSummary>
        <div class="form-group">
            <label class="control-label">Item to Order</label>
            <select @onchange="FoodItemChange" class="form-control">
                <option value="">Select a meal..</option>
                @foreach (var f in foodItems)
                {
                    <option value="@f.Id">@f.Title</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label class="control-label">Quantity</label>
            <InputNumber @bind-Value="order.Quantity" class="form-control"></InputNumber>
            <ValidationMessage For="@(() => order.Quantity)" class="text-danger"></ValidationMessage>
        </div>
        <div class="form-group">
            <label class="control-label">Name for the Order</label>
            <InputText @bind-Value="order.OrderName" class="form-control"></InputText>
            <ValidationMessage For="@(() => order.OrderName)" class="text-danger"></ValidationMessage>
        </div>
        <div class="form-group">
            <input type="submit" class="btn btn-primary" value="Order Food"/>
        </div>
    </EditForm>
}

@code {
    private OrderModel order = new();
    private List<FoodModel> foodItems = new();
    
    private string errorString;
    protected override async Task OnParametersSetAsync()
    {
        HttpResponseMessage response = await Http.GetAsync("/api/Food");

        if (response.IsSuccessStatusCode)
        {
            foodItems = await response.Content.ReadFromJsonAsync<List<FoodModel>>();
        }
        else
        {
            errorString = response.ReasonPhrase;
        }
    }

    private void FoodItemChange(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()) == false)
        {
            order.FoodId = int.Parse(e.Value.ToString());
        }
        
    }

    private async Task HandleValidSubmit()
    {
        order.Total = order.Quantity * foodItems.First(x => x.Id == order.FoodId).Price;

        try
        {
            var response = await Http.PostAsJsonAsync("api/Order", order);
            var contents = await response.Content.ReadFromJsonAsync<OrderCreateResultsModel>();
            order = new();
            // navigationManager.NavigateTo($"order/display/P{contents.Id}");
        }
        catch (Exception e)
        {
            errorString = e.Message;
        }
    }
}